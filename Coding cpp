// A recursive function that returns the nth Fibonacci number

#include <iostream>

using namespace std;

int fibonacci(int); // function declaration

int main() // main function
{
  int N = 4;
  int list [N];
  
  // generate list of fibonacci numbers
  for(int i=0; i<N; i++)
  {
    list[i] = fibonacci(i+1);
  }
   
  // sort list in reverse order
  int i = 0;
  int j = N - 1;
  while(i != j){
      swap(list[i], list[j]);
      i++;
      j--;
  }
  
  // print reverse generated list
  cout << "\n";
  for(int i=0; i<N; i++)
  {
    cout << list[i] << endl;
  }
}

int fibonacci(int n) // function definition
{
  if(n <= 0){
    cout << "ERROR: Fibonacci sequence is not defined for 0 or negative numbers" << endl;
    return -1;
  }
  if(n == 1){
    return 0;
  }
  if (n == 2) {
    return 1;
  }
  else {
    return fibonacci(n - 1) + fibonacci(n - 2); 
  }
}


// Implement an algorithm to find the kth to last element of a singly linked list

#include <iostream>
#include <list>

using namespace std;

int kthToLastElement(list<int>, int); // function declaration

int main() // main function
{
  list <int> listOfIntegers ;
  // add elements to list
  listOfIntegers.push_back(4);
  listOfIntegers.push_back(2);
  listOfIntegers.push_back(45);
  listOfIntegers.push_back(464);
  listOfIntegers.push_back(3);
  listOfIntegers.push_back(24);
  listOfIntegers.push_back(-5);
  listOfIntegers.push_back(6);
  
  int k = 3;
  cout << kthToLastElement(listOfIntegers, k);
}

int kthToLastElement(list<int> l, int k) // function definition
{
    int num = k-1;
    for(int i=0; i<num; i++)
    {
        l.pop_back();
    }
    return l.back();
}



// Implement an algorithm to determine if a string has all unique characters

#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

// function declaration
bool is_Unique(string);
bool is_Unique_DS(string s);
  
int main() // main function
{
  
  cout << "\n";
  cout << is_Unique("apple") << endl;  
  cout << is_Unique("cat") << endl;
  cout << is_Unique_DS("apple") << endl;
  cout << is_Unique_DS("cat") << endl;
  
}

// function definition
bool is_Unique(string s) 
{
    int l = s.size();
    for(int i=0; i < l; i++){
        for(int j = i+1; j < l; j++){
            if (s[i] == s[j]) 
                return false;
        }
    }
    return true;
}

bool is_Unique_DS(string s) // using data structures
{
    int l = s.size();
  
  //this map stores the frequency of a character in the string
    unordered_map <char, int> hash; 
    for (int i=0; i < l; i++){
        if (hash[s[i]] == 0)
            hash[s[i]]++;
        else 
            return false;
    }
    return true;
}


// A program to sort a stack such that the smallest items are on the top

#include <iostream>
#include <stack>

using namespace std;

stack<int> sort_Stack(stack<int> &); // function definition

int main() // main function
{
  stack<int> s;
  s.push(45);
  s.push(5);
  s.push(3);
  s.push(-2);
  s.push(689);
  
  stack<int> s2 = sort_Stack(s);
  cout << "\n";
  while(!s2.empty()){
    cout << s2.top() << endl;
    s2.pop();
  }
}

// function definition
stack<int> sort_Stack(stack<int> &input) 
{ 
    stack<int> stack2; 
    while (!input.empty()) 
    {  
        int tmp = input.top(); 
        input.pop(); 
        while (!stack2.empty() && stack2.top() < tmp) { 
            input.push(stack2.top()); 
            stack2.pop(); 
        } 
        stack2.push(tmp); 
    } 
    return stack2; 
} 
